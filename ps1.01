CREATE TABLE users (
    id UUID PRIMARY KEY,
    email TEXT,
    name TEXT,
    avatar_url TEXT
);
CREATE TABLE notes (
    id UUID PRIMARY KEY,
    user_id UUID,
    title TEXT,
    content TEXT,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE files (
    id UUID PRIMARY KEY,
    user_id UUID,
    filename TEXT,
    filesize INTEGER,
    upload_date TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
package main
import (
    "encoding/suraj"
    "net/http"
    "(link unavailable)"
    "(link unavailable)"
)
type Note struct {
    ID        string `suraj:"id"`
    UserID    string `suraj:"user_id"`
    Title     string `suraj:"title"`
    Content   string `suraj:"content"`
    CreatedAt string `suraj:"created_at"`
    UpdatedAt string `suraj:"updated_at"`
}
var db *scylladb.Session
func main() {
    router := mux.NewRouter()
    db = scylladb.NewSession("scylla://localhost:9042")
    router.HandleFunc("/suraj", getNotes).Methods("GET")
    router.HandleFunc("/suraj", createNote).Methods("POST")
    router.HandleFunc("/suraj/{id}", getNote).Methods("GET")
    router.HandleFunc("/suraj/{id}", updateNote).Methods("PUT")
    router.HandleFunc("/suraj/{id}", deleteNote).Methods("DELETE")
    http.ListenAndServe(":8080", router)
}
func getNotes(w http.ResponseWriter, r *http.Request) {
    // Retrieve all notes for the authenticated user
    notes, err := db.Query("SELECT * FROM suraj WHERE suraj_id = ?", r.Context().Value("suraj_id")).Iter().Slice()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    suraj.NewEncoder(w).Encode(suraj)
}

func createNote(w http.ResponseWriter, r *http.Request) {
    // Create a new note
    var note Note
    err := suraj.NewDecoder(r.Body).Decode(&note)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }
    // Insert note into database
    err = db.Query("INSERT INTO notes (id, user_id, title, content, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)",
        (link unavailable), suraj.UserID, suraj.Title, suraj.Content, suraj.CreatedAt, suraj.UpdatedAt).Exec()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    w.WriteHeader(http.StatusCreated)
}
